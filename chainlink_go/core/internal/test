package main

import (
	"fmt"
	"reflect"
	"strings"
	"time"
	"crypto/aes"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/pkg/errors"
	"github.com/smartcontractkit/libocr/offchainreporting/types"


	"github.com/ethereum/go-ethereum/crypto"
	"golang.org/x/crypto/curve25519"
)


const setConfigEncodedComponentsABI = `[
  {
    "name": "setConfigEncodedComponents",
    "type": "tuple",
    "components": [
      {
        "name": "deltaProgress",
        "type": "int64"
      },
      {
        "name": "deltaResend",
        "type": "int64"
      },
      {
        "name": "deltaRound",
        "type": "int64"
      },
      {
        "name": "deltaGrace",
        "type": "int64"
      },
      {
        "name": "deltaC",
        "type": "int64"
      },
      {
        "name": "alphaPPB",
        "type": "uint64"
      },
      {
        "name": "deltaStage",
        "type": "int64"
      },
      {
        "name": "rMax",
        "type": "uint8"
      },
      {
        "name": "s",
        "type": "uint8[]"
      },
      {
        "name": "offchainPublicKeys",
        "type": "bytes32[]"
      },
      {
        "name": "peerIDs",
        "type": "string"
      },
      {
        "name": "sharedSecretEncryptions",
        "type": "tuple",
        "components": [
          {
            "name": "diffieHellmanPoint",
            "type": "bytes32"
          },
          {
            "name": "sharedSecretHash",
            "type": "bytes32"
          },
          {
            "name": "encryptions",
            "type": "bytes16[]"
          }
        ]
      }
    ]
  }
]`


const SharedSecretSize = 16 // A 128-bit symmetric key
type encryptedSharedSecret [SharedSecretSize]byte

// SharedSecretEncryptions is the encryptions of SharedConfig.SharedSecret,
// using each oracle's SharedSecretEncryptionPublicKey.
//
// We use a custom encryption scheme to be more space-efficient (compared to
// standard AEAD schemes, nacl crypto_box, etc...), which saves gas in
// transmission to the OffchainAggregator.
type SharedSecretEncryptions struct {
	// (secret key chosen by dealer) * g, X25519 point
	DiffieHellmanPoint [curve25519.PointSize]byte

	// keccak256 of plaintext sharedSecret.
	//
	// Since SharedSecretEncryptions are shared through a smart contract, each
	// oracle will see the same SharedSecretHash. After decryption, oracles can
	// check their sharedSecret against SharedSecretHash to prevent the dealer
	// from equivocating
	SharedSecretHash common.Hash

	// Encryptions of the shared secret with one entry for each oracle. The
	// i-th oracle can recover the key as follows:
	//
	// 1. key := Keccak256(DH(DiffieHellmanPoint, process' secret key))[:16]
	// 2. sharedSecret := AES128DecryptBlock(key, Encryptions[i])
	//
	// See Decrypt for details.
	Encryptions []encryptedSharedSecret
}

func (e SharedSecretEncryptions) Equal(e2 SharedSecretEncryptions) bool {
	if len(e.Encryptions) != len(e2.Encryptions) {
		return false
	}
	encsEqual := true
	for i := range e.Encryptions {
		encsEqual = encsEqual && e.Encryptions[i] == e2.Encryptions[i]
	}
	return encsEqual &&
		e.DiffieHellmanPoint == e2.DiffieHellmanPoint &&
		e.SharedSecretHash == e2.SharedSecretHash
}

// Decrypt one block with AES-128
func aesDecryptBlock(key, ciphertext []byte) [16]byte {
	if len(key) != 16 {
		// assertion
		panic("key has wrong length")
	}
	if len(ciphertext) != 16 {
		// assertion
		panic("ciphertext has wrong length")
	}

	cipher, err := aes.NewCipher(key)
	if err != nil {
		// assertion
		panic(fmt.Sprintf("Unexpected error during aes.NewCipher: %v", err))
	}

	var plaintext [16]byte
	cipher.Decrypt(plaintext[:], ciphertext)
	return plaintext
}

// Decrypt returns the sharedSecret
func (e SharedSecretEncryptions) Decrypt(oid types.OracleID, k types.PrivateKeys) (*[SharedSecretSize]byte, error) {
	if oid < 0 || len(e.Encryptions) <= int(oid) {
		return nil, errors.New("oid out of range of SharedSecretEncryptions.Encryptions")
	}

	dhPoint, err := k.ConfigDiffieHellman(&e.DiffieHellmanPoint)
	if err != nil {
		return nil, err
	}

	key := crypto.Keccak256(dhPoint[:])[:16]

	sharedSecret := aesDecryptBlock(key, e.Encryptions[int(oid)][:])

	if common.BytesToHash(crypto.Keccak256(sharedSecret[:])) != e.SharedSecretHash {
		return nil, errors.Errorf("decrypted sharedSecret has wrong hash")
	}

	return &sharedSecret, nil
}


const EncodedConfigVersion = 1

// setConfigEncodedComponents contains the contents of the oracle Config objects
// which need to be serialized
type setConfigEncodedComponents struct {
	DeltaProgress           time.Duration
	DeltaResend             time.Duration
	DeltaRound              time.Duration
	DeltaGrace              time.Duration
	DeltaC                  time.Duration
	AlphaPPB                uint64
	DeltaStage              time.Duration
	RMax                    uint8
	S                       []int
	OffchainPublicKeys      []types.OffchainPublicKey
	PeerIDs                 []string
	SharedSecretEncryptions SharedSecretEncryptions
}

// setConfigSerializationTypes gives the types used to represent a
// setConfigEncodedComponents to abiencode. The field names must match those of
// setConfigEncodedComponents.
type setConfigSerializationTypes struct {
	DeltaProgress           int64
	DeltaResend             int64
	DeltaRound              int64
	DeltaGrace              int64
	DeltaC                  int64
	AlphaPPB                uint64
	DeltaStage              int64
	RMax                    uint8
	S                       []uint8
	OffchainPublicKeys      []common.Hash // Each key is a bytes32
	PeerIDs                 string        // comma-separated
	SharedSecretEncryptions sseSerializationTypes
}

// sseSerializationTypes gives the types used to represent an
// SharedSecretEncryptions to abiencode. The field names must match those of
// SharedSecretEncryptions.
type sseSerializationTypes struct {
	DiffieHellmanPoint common.Hash
	SharedSecretHash   common.Hash
	Encryptions        [][SharedSecretSize]byte
}

// encoding is the ABI schema used to encode a setConfigEncodedComponents, taken
// from setConfigEncodedComponentsABI in ./abiencode.go (in this package directory.)
var encoding = getEncoding()

// Serialized configs must be no larger than this (arbitrary bound, to prevent
// resource exhaustion attacks)
var configSizeBound = 20 * 1000

// Encode returns a binary serialization of o
func (o setConfigEncodedComponents) encode() []byte {
	rv, err := encoding.Pack(o.serializationRepresentation())
	if err != nil {
		panic(err)
	}
	if len(rv) > configSizeBound {
		panic("config serialization too large")
	}
	return rv
}

func decodeContractSetConfigEncodedComponents(
	b []byte,
) (o setConfigEncodedComponents, err error) {
	if len(b) > configSizeBound {
		return o, errors.Errorf(
			"attempt to deserialize a too-long config (%d bytes)", len(b),
		)
	}
	var vals []interface{}
	if vals, err = encoding.Unpack(b); err != nil {
		return o, errors.Wrapf(err, "could not deserialize setConfig binary blob")
	}
	setConfig := abi.ConvertType(vals[0], &setConfigSerializationTypes{}).(*setConfigSerializationTypes)
	return setConfig.golangRepresentation(), nil
}

func (o setConfigEncodedComponents) serializationRepresentation() setConfigSerializationTypes {
	transmitDelays := make([]uint8, len(o.S))
	for i, d := range o.S {
		transmitDelays[i] = uint8(d)
	}
	publicKeys := make([]common.Hash, len(o.OffchainPublicKeys))
	for i, k := range o.OffchainPublicKeys {
		publicKeys[i] = common.BytesToHash(k)
	}
	if o.RMax < 0 {
		panic(fmt.Sprintf("rMax must be non-negative, got %d", o.RMax))
	}
	return setConfigSerializationTypes{
		int64(o.DeltaProgress),
		int64(o.DeltaResend),
		int64(o.DeltaRound),
		int64(o.DeltaGrace),
		int64(o.DeltaC),
		o.AlphaPPB,
		int64(o.DeltaStage),
		o.RMax,
		transmitDelays,
		publicKeys,
		strings.Join(o.PeerIDs, ","),
		o.SharedSecretEncryptions.serializationRepresentation(),
	}
}

func (or setConfigSerializationTypes) golangRepresentation() setConfigEncodedComponents {
	transmitDelays := make([]int, len(or.S))
	for i, d := range or.S {
		transmitDelays[i] = int(d)
	}
	keys := make([]types.OffchainPublicKey, len(or.OffchainPublicKeys))
	for i, k := range or.OffchainPublicKeys {
		keys[i] = types.OffchainPublicKey(k.Bytes())
	}
	var peerIDs []string
	if len(or.PeerIDs) > 0 {
		peerIDs = strings.Split(or.PeerIDs, ",")
	}
	return setConfigEncodedComponents{
		time.Duration(or.DeltaProgress),
		time.Duration(or.DeltaResend),
		time.Duration(or.DeltaRound),
		time.Duration(or.DeltaGrace),
		time.Duration(or.DeltaC),
		or.AlphaPPB,
		time.Duration(or.DeltaStage),
		or.RMax,
		transmitDelays,
		keys,
		peerIDs,
		or.SharedSecretEncryptions.golangRepresentation(),
	}
}

func (e SharedSecretEncryptions) serializationRepresentation() sseSerializationTypes {
	encs := make([][SharedSecretSize]byte, len(e.Encryptions))
	for i, enc := range e.Encryptions {
		encs[i] = enc
	}
	return sseSerializationTypes{
		common.Hash(e.DiffieHellmanPoint),
		e.SharedSecretHash,
		encs,
	}
}

func (er sseSerializationTypes) golangRepresentation() SharedSecretEncryptions {
	encs := make([]encryptedSharedSecret, len(er.Encryptions))
	for i, enc := range er.Encryptions {
		encs[i] = encryptedSharedSecret(enc)
	}
	return SharedSecretEncryptions{
		[32]byte(er.DiffieHellmanPoint),
		er.SharedSecretHash,
		encs,
	}
}

func getEncoding() abi.Arguments {
	// Trick used in abi's TestPack, to parse a list of arguments: make a JSON
	// representation of a method which has the target list as the inputs, then
	// pull the parsed argument list out of that method.
	aBI, err := abi.JSON(strings.NewReader(fmt.Sprintf(
		`[{ "name" : "method", "type": "function", "inputs": %s}]`,
		setConfigEncodedComponentsABI)))
	if err != nil {
		panic(err)
	}
	return aBI.Methods["method"].Inputs
}

func checkFieldNamesAgainstStruct(fields map[string]bool, i interface{}) {
	s := reflect.ValueOf(i).Type()
	for i := 0; i < s.NumField(); i++ {
		fieldName := s.Field(i).Name
		if !fields[fieldName] {
			panic("no encoding found for " + fieldName)
		}
		fields[fieldName] = false
	}
	for name, unseen := range fields {
		if unseen {
			panic("extra field found in abiencode schema, " + name)
		}
	}
}

func checkTupEntriesMatchStruct(t abi.Type, i interface{}) {
	if t.T != abi.TupleTy {
		panic("tuple required")
	}
	fields := make(map[string]bool)
	for _, fieldName := range t.TupleRawNames {
		capitalizedName := strings.ToUpper(fieldName[:1]) + fieldName[1:]
		fields[capitalizedName] = true
	}
	checkFieldNamesAgainstStruct(fields, i)
}

func init() { // check that abiencode fields match those of config structs
	checkTupEntriesMatchStruct(encoding[0].Type, setConfigEncodedComponents{})
	components := encoding[0].Type.TupleElems
	essName := encoding[0].Type.TupleRawNames[len(components)-1]
	if essName != "sharedSecretEncryptions" {
		panic("expecting sharedSecretEncryptions in last position, got " + essName)
	}
	ess := components[len(components)-1]
	checkTupEntriesMatchStruct(*ess, SharedSecretEncryptions{})
}

func checkFieldNamesMatch(s, t interface{}) {
	st, tt := reflect.ValueOf(s).Type(), reflect.ValueOf(t).Type()
	if st.NumField() != tt.NumField() {
		panic(fmt.Sprintf("number of fields differ: %T has %d, %T has %d",
			s, st.NumField(),
			t, tt.NumField()))
	}
	for i := 0; i < st.NumField(); i++ {
		if st.Field(i).Name != tt.Field(i).Name {
			panic(fmt.Sprintf("field name mismatch on %T vs %T: %s vs %s",
				s, t, st.Field(i).Name, tt.Field(i).Name))
		}
	}
}

func init() { // Check that serialization fields match those of target structs
	checkFieldNamesMatch(setConfigEncodedComponents{}, setConfigSerializationTypes{})
	checkFieldNamesMatch(SharedSecretEncryptions{}, sseSerializationTypes{})
}


func main() {
    fmt.Println("Hello, World!")
	var a = []byte
	/*for i := 0; i < len(a); i++ {
		a[i] = a[i]-18
	}
	fmt.Println(a)*/
	var _, err = decodeContractSetConfigEncodedComponents(a)
	fmt.Println("Deserialize error: ",err)
}


//https://etherscan.io/tx/0xb40632a5d387a0cbdff43e4b994f48b00a5f433d51abee08b41696b2b55fd19c#eventlog